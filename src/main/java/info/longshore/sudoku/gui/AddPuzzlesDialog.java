/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddPuzzlesDialog.java
 *
 * Created on May 5, 2009, 8:12:26 PM
 */

package info.longshore.sudoku.gui;

import org.jdesktop.application.Action;
import info.longshore.sudoku.domain.*;
import javax.swing.JOptionPane;
/**
 *
 * @author rm108s04
 */
public class AddPuzzlesDialog extends javax.swing.JDialog {

    /** Creates new form AddPuzzlesDialog */
    public AddPuzzlesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        numberOfPuzzlesTextField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        difficultyComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(info.longshore.sudoku.gui.SudokuApplication.class).getContext().getResourceMap(AddPuzzlesDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        setResizable(false);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(info.longshore.sudoku.gui.SudokuApplication.class).getContext().getActionMap(AddPuzzlesDialog.class, this);
        jButton1.setAction(actionMap.get("addPuzles")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        numberOfPuzzlesTextField.setText(resourceMap.getString("numberOfPuzzlesTextField.text")); // NOI18N
        numberOfPuzzlesTextField.setName("numberOfPuzzlesTextField"); // NOI18N

        jButton2.setAction(actionMap.get("close")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        difficultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Easy", "Medium", "Hard" }));
        difficultyComboBox.setName("difficultyComboBox"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(difficultyComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(numberOfPuzzlesTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(numberOfPuzzlesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel2)
                    .addComponent(difficultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddPuzzlesDialog dialog = new AddPuzzlesDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    @Action
    public void close() {
        numberOfPuzzlesTextField.setText(""); // Reset text field
        difficultyComboBox.setSelectedIndex(0); // Select the first item        
        setVisible(false);
    }

    @Action
    public void addPuzles() {
        // Get the active collection
        ConstraintPuzzleCollectionPanel selectedPanel = SudokuApplication.getApplication().getApplicationView().getSelectedCollectionPanel();
        if(selectedPanel == null) {
            // Not on a collection panel...
            return;
        }

        ConstraintPuzzleCollection selectedCollection = selectedPanel.getCollection();

        if(selectedCollection != null) {
            int numberOfPuzzlesToAdd;
            
            try {
                numberOfPuzzlesToAdd = Integer.parseInt(numberOfPuzzlesTextField.getText());
            }
            catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Number Of Puzzles must be numeric.", "Non-Numeric Data", JOptionPane.ERROR_MESSAGE);
                numberOfPuzzlesTextField.selectAll();
                numberOfPuzzlesTextField.requestFocus();
                return;
            }
            
            int maximumNumberOfFailuresInARow = 25; // Crude failure detection
            int numberOfPuzzlesGenerated = 0;
            int numberOfSuccessiveFailures = 0;
            while(numberOfPuzzlesGenerated < numberOfPuzzlesToAdd) {
                if(numberOfSuccessiveFailures == maximumNumberOfFailuresInARow) {
                    // If we've failed too much...
                    JOptionPane.showMessageDialog(this, "Unable to generate puzzles.", "We've Failed Too Much, Man!", JOptionPane.ERROR_MESSAGE);
                    return; // Void
                }
                else {                
                   // try {
                    ConstraintPuzzle newPuzzleSolution = null;
                    try {
                        newPuzzleSolution = (ConstraintPuzzle)selectedCollection.getPuzzleClass().newInstance();
                    } catch(Exception e) { }
                        
                        newPuzzleSolution.setSize(9);
                        newPuzzleSolution.setRuleset(selectedCollection.getRuleset());
                        newPuzzleSolution.solveWithBacktracking(true);

                   //     System.out.println("Making new puzzle");

                        ConstraintPuzzle newPuzzle;

                        // TODO here: FIX THIS IS AWFUL
                        if( difficultyComboBox.getSelectedItem().toString().equals("Easy") ) {
                            newPuzzle = newPuzzleSolution.getNewStartState(Difficulty.EASY);
                        }
                        else if( difficultyComboBox.getSelectedItem().toString().equals("Medium") ) {
                            newPuzzle = newPuzzleSolution.getNewStartState(Difficulty.MEDIUM);
                        }
                        else {
                            newPuzzle = newPuzzleSolution.getNewStartState(Difficulty.HARD);
                        }

                        if(newPuzzle == null) {
                            numberOfSuccessiveFailures++;
                            System.out.println("Failed.");
                        }
                        else {
                            numberOfPuzzlesGenerated++;
                            selectedCollection.addPuzzle(newPuzzle);
                            numberOfSuccessiveFailures = 0;
                        }
                        
                        /*
                    }
                    catch(Exception e) {
                       // throw new RuntimeException();
                        System.out.println("Exception in AddPuzzlesDialog: " + e.toString());
                    }*/
                }
            }
            selectedPanel.syncPanels();
            selectedPanel.repaint();

            SudokuApplication.getApplication().getApplicationView().saveSelectedPuzzleCollection();

            close();
        } else {
            System.out.println("GUI Error: AddPuzzlesDialog");
            // Throw an alert ?
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox difficultyComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField numberOfPuzzlesTextField;
    // End of variables declaration//GEN-END:variables

}
