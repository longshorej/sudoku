/*
 * SudokuView.java
 */

package info.longshore.sudoku.gui;

import info.longshore.sudoku.domain.ConstraintPuzzleCollection;
import org.jdesktop.application.Action;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;

import javax.swing.*;
import javax.swing.event.ChangeListener;
import java.util.ArrayList;

/**
 * The application's main frame.
 */
public class SudokuView extends FrameView {

  public SudokuView(SingleFrameApplication app) {
    super(app);

    puzzleCollections = new ArrayList<ConstraintPuzzleCollection>();

    initComponents();

    jTabbedPane2.addChangeListener(new ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent e) {
        tabChanged();
      }

    });

    // status bar initialization - message timeout, idle icon and busy animation, etc
    ResourceMap resourceMap = getResourceMap();


  }

  @Action
  public void showEditProfilesPanel() {
    if (editPreferencesDialog == null) {
      JFrame mainFrame = SudokuApplication.getApplication().getMainFrame();
      editPreferencesDialog = new EditProfilesDialog(mainFrame, true);
      editPreferencesDialog.setLocationRelativeTo(mainFrame);
    }

    SudokuApplication.getApplication().show(editPreferencesDialog);
  }

  @Action
  public void showNewCollectionDialog() {
    JFrame mainFrame = SudokuApplication.getApplication().getMainFrame();
    newCollectionDialog = new NewCollectionDialog(mainFrame, true);
    newCollectionDialog.setLocationRelativeTo(mainFrame);
    SudokuApplication.getApplication().show(newCollectionDialog);
  }

  @Action
  public void showAboutBox() {
    if (aboutBox == null) {
      JFrame mainFrame = SudokuApplication.getApplication().getMainFrame();
      aboutBox = new SudokuAboutBox(mainFrame);
      aboutBox.setLocationRelativeTo(mainFrame);
    }
    SudokuApplication.getApplication().show(aboutBox);
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    mainPanel = new javax.swing.JPanel();
    jTabbedPane2 = new javax.swing.JTabbedPane();
    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    menuBar = new javax.swing.JMenuBar();
    javax.swing.JMenu fileMenu = new javax.swing.JMenu();
    jMenuItem2 = new javax.swing.JMenuItem();
    jMenuItem3 = new javax.swing.JMenuItem();
    javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
    jMenu2 = new javax.swing.JMenu();
    jMenuItem6 = new javax.swing.JMenuItem();
    jMenuItem5 = new javax.swing.JMenuItem();
    jMenuItem4 = new javax.swing.JMenuItem();
    jMenu1 = new javax.swing.JMenu();
    jMenuItem1 = new javax.swing.JMenuItem();
    javax.swing.JMenu helpMenu = new javax.swing.JMenu();
    jMenuItem7 = new javax.swing.JMenuItem();
    javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

    mainPanel.setName("mainPanel"); // NOI18N

    jTabbedPane2.setMinimumSize(new java.awt.Dimension(640, 480));
    jTabbedPane2.setName("jTabbedPane2"); // NOI18N

    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(info.longshore.sudoku.gui.SudokuApplication.class).getContext().getResourceMap(SudokuView.class);
    jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
    jPanel1.setName("jPanel1"); // NOI18N

    jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
    jLabel1.setName("jLabel1"); // NOI18N

    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel2.setIcon(resourceMap.getIcon("jLabel2.icon")); // NOI18N
    jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
    jLabel2.setName("jLabel2"); // NOI18N

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
          .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
          .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE))
    );

    jTabbedPane2.addTab(resourceMap.getString("jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

    javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
    mainPanel.setLayout(mainPanelLayout);
    mainPanelLayout.setHorizontalGroup(
      mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
    );
    mainPanelLayout.setVerticalGroup(
      mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
    );

    menuBar.setName("menuBar"); // NOI18N

    fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
    fileMenu.setName("fileMenu"); // NOI18N

    javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(info.longshore.sudoku.gui.SudokuApplication.class).getContext().getActionMap(SudokuView.class, this);
    jMenuItem2.setAction(actionMap.get("showNewCollectionDialog")); // NOI18N
    jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
    jMenuItem2.setName("jMenuItem2"); // NOI18N
    fileMenu.add(jMenuItem2);

    jMenuItem3.setAction(actionMap.get("showOpenCollectionDialog")); // NOI18N
    jMenuItem3.setText(resourceMap.getString("jMenuItem3.text")); // NOI18N
    jMenuItem3.setName("jMenuItem3"); // NOI18N
    fileMenu.add(jMenuItem3);

    exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
    exitMenuItem.setName("exitMenuItem"); // NOI18N
    fileMenu.add(exitMenuItem);

    menuBar.add(fileMenu);

    jMenu2.setText(resourceMap.getString("jMenu2.text")); // NOI18N
    jMenu2.setName("jMenu2"); // NOI18N

    jMenuItem6.setAction(actionMap.get("showAddPuzzlesDialog")); // NOI18N
    jMenuItem6.setText(resourceMap.getString("jMenuItem6.text")); // NOI18N
    jMenuItem6.setName("jMenuItem6"); // NOI18N
    jMenu2.add(jMenuItem6);

    jMenuItem5.setAction(actionMap.get("showExportCollectionDialog")); // NOI18N
    jMenuItem5.setText(resourceMap.getString("jMenuItem5.text")); // NOI18N
    jMenuItem5.setName("jMenuItem5"); // NOI18N
    jMenu2.add(jMenuItem5);

    jMenuItem4.setAction(actionMap.get("closeSelectedCollection")); // NOI18N
    jMenuItem4.setText(resourceMap.getString("jMenuItem4.text")); // NOI18N
    jMenuItem4.setName("jMenuItem4"); // NOI18N
    jMenu2.add(jMenuItem4);

    menuBar.add(jMenu2);

    jMenu1.setAction(actionMap.get("showEditPreferencesPanel")); // NOI18N
    jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
    jMenu1.setName("jMenu1"); // NOI18N

    jMenuItem1.setAction(actionMap.get("showEditProfilesPanel")); // NOI18N
    jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
    jMenuItem1.setName("jMenuItem1"); // NOI18N
    jMenu1.add(jMenuItem1);

    menuBar.add(jMenu1);
    jMenu1.setVisible(false);

    helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
    helpMenu.setName("helpMenu"); // NOI18N

    jMenuItem7.setAction(actionMap.get("showUserManualDialog")); // NOI18N
    jMenuItem7.setText(resourceMap.getString("jMenuItem7.text")); // NOI18N
    jMenuItem7.setName("jMenuItem7"); // NOI18N
    helpMenu.add(jMenuItem7);

    aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
    aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
    aboutMenuItem.setName("aboutMenuItem"); // NOI18N
    helpMenu.add(aboutMenuItem);

    menuBar.add(helpMenu);

    setComponent(mainPanel);
    setMenuBar(menuBar);
  }// </editor-fold>//GEN-END:initComponents

  @Action
  public void showOpenCollectionDialog() {
    JFrame mainFrame = SudokuApplication.getApplication().getMainFrame();
    openCollectionDialog = new OpenCollectionDialog(mainFrame, true);
    openCollectionDialog.setLocationRelativeTo(mainFrame);
    SudokuApplication.getApplication().show(openCollectionDialog);
  }

  @Action
  public void showExportCollectionDialog() {
    if (exportCollectionDialog == null) {
      JFrame mainFrame = SudokuApplication.getApplication().getMainFrame();
      exportCollectionDialog = new ExportCollectionDialog(mainFrame, true);
      exportCollectionDialog.setLocationRelativeTo(mainFrame);
    }

    if (getSelectedCollectionPanel() == null) return;
    SudokuApplication.getApplication().show(exportCollectionDialog);
  }

  @Action
  public void closeSelectedCollection() {
    ConstraintPuzzleCollectionPanel selectedPanel = getSelectedCollectionPanel();

    if (getSelectedCollectionPanel() == null) return;

    if (selectedPanel != null) {
      SudokuApplication.getApplication().getApplicationModel().saveCollection(selectedPanel.getCollection());
      jTabbedPane2.remove(selectedPanel);
    }
  }

  @Action
  public void openCollection(ConstraintPuzzleCollection puzzleCollection) {
    if (!this.collectionWithNameIsOpen(puzzleCollection.getName())) {
      // Only open if it isnt already..

      puzzleCollections.add(puzzleCollection);
      jTabbedPane2.addTab(puzzleCollection.getName(), new ConstraintPuzzleCollectionPanel(puzzleCollection));
      jTabbedPane2.setSelectedIndex(jTabbedPane2.getTabCount() - 1);
    }
  }

  @Action
  public void closeCollection(int collectionToRemove) {
    // Remove from puzzleCollections array if present, and also
    // from the tabbed pane

    if (collectionToRemove > 0) {
      if (jTabbedPane2.getComponents().length - 1 > collectionToRemove && puzzleCollections.size() > collectionToRemove) {
        jTabbedPane2.remove(collectionToRemove + 1);
        puzzleCollections.remove(collectionToRemove);
      }
    }
  }

  @Action
  public void showAddPuzzlesDialog() {
    if (addPuzzlesDialog == null) {
      JFrame mainFrame = SudokuApplication.getApplication().getMainFrame();
      addPuzzlesDialog = new AddPuzzlesDialog(mainFrame, true);
      addPuzzlesDialog.setLocationRelativeTo(mainFrame);
    }

    if (getSelectedCollectionPanel() == null) return;

    SudokuApplication.getApplication().show(addPuzzlesDialog);
  }

  public ConstraintPuzzleCollectionPanel getSelectedCollectionPanel() {
    if (jTabbedPane2.getSelectedIndex() > 0) {
      ConstraintPuzzleCollectionPanel selectedPanel = (ConstraintPuzzleCollectionPanel) jTabbedPane2.getSelectedComponent();

      return selectedPanel;
    } else {
      return null;
    }
  }

  public boolean collectionWithNameIsOpen(String name) {
    for (int i = 1; i < jTabbedPane2.getTabCount(); i++) {
      ConstraintPuzzleCollectionPanel collectionPanel = (ConstraintPuzzleCollectionPanel) jTabbedPane2.getComponent(i);

      if (collectionPanel.getCollection().getName().equals(name)) {
        return true;
      }
    }

    return false;
  }

  @Action
  public void saveSelectedPuzzleCollection() {
    if (jTabbedPane2.getSelectedIndex() > 0) {
      ConstraintPuzzleCollectionPanel selectedPanel = (ConstraintPuzzleCollectionPanel) jTabbedPane2.getSelectedComponent();
      SudokuApplication.getApplication().getApplicationModel().saveCollection(selectedPanel.getCollection());
    }
  }

  @Action
  public void showUserManualDialog() {
    if (userManualDialog == null) {
      JFrame mainFrame = SudokuApplication.getApplication().getMainFrame();
      userManualDialog = new UserManualDialog(mainFrame, true);
      userManualDialog.setLocationRelativeTo(mainFrame);
    }

    SudokuApplication.getApplication().show(userManualDialog);
  }

  public void tabChanged() {
    System.out.println("HAY");
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JMenuItem jMenuItem3;
  private javax.swing.JMenuItem jMenuItem4;
  private javax.swing.JMenuItem jMenuItem5;
  private javax.swing.JMenuItem jMenuItem6;
  private javax.swing.JMenuItem jMenuItem7;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JTabbedPane jTabbedPane2;
  private javax.swing.JPanel mainPanel;
  private javax.swing.JMenuBar menuBar;
  // End of variables declaration//GEN-END:variables

  private JDialog aboutBox;
  private JDialog editPreferencesDialog;
  private JDialog newCollectionDialog;
  private JDialog openCollectionDialog;
  private JDialog exportCollectionDialog;
  private JDialog addPuzzlesDialog;
  private JDialog userManualDialog;

  private ArrayList<ConstraintPuzzleCollection> puzzleCollections;
}
